/* Generated By:JJTree&JavaCC: Do not edit this line. AtFormulaParser.java */
/* * Â© Copyright FOCONIS AG, 2014 *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at: *  * http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or  * implied. See the License for the specific language governing  * permissions and limitations under the License. */
package org.openntf.domino.formula;
import org.openntf.domino.formula.ast.*;


import java.util.HashMap;
import java.util.Map;

import org.openntf.domino.formula.AtFunction;
import org.openntf.domino.formula.Formatter;
import org.openntf.domino.formula.AtFunctionFactory;
import org.openntf.domino.utils.Factory;
import org.openntf.domino.utils.Terminatable;

public class AtFormulaParser/*@bgen(jjtree)*/implements AtFormulaParserTreeConstants, AtFormulaParserConstants {/*@bgen(jjtree)*/
  protected JJTAtFormulaParserState jjtree = new JJTAtFormulaParserState();protected Formatter formatter;
  protected AtFunctionFactory functionFactory;
  protected Map<String, AtFunction> customFunc = new HashMap<String, AtFunction>();
  private static ThreadLocal<AtFormulaParser> instance_ = new ThreadLocal<AtFormulaParser>() {
                @Override
                protected AtFormulaParser initialValue() {
                        return new AtFormulaParser(DominoFormatter.getInstance(), AtFunctionFactory.getInstance());
                }
  };

  static {
                Factory.onTerminate(new Terminatable() {
                        public void terminate() {
                                instance_.set(null);
                        }
                });
  }

  public AtFormulaParser(Formatter fmt, AtFunctionFactory fact) {
    this(new java.io.StringReader("")); // needed for proper init :(    formatter = fmt;
    functionFactory = fact;
  }
  public Formatter getFormatter() {
        return formatter;
  }

  /**   * This function returns a preconfigured default instance   */
  public static AtFormulaParser getInstance() {
        return instance_.get();
  }

  public AtFunction getFunction(String string) {
        AtFunction func = functionFactory.getFunction(string);
        if (func != null) {
                return func;
    }
        return customFunc.get(string.toLowerCase());
  }

  public void declareFunction(String funcName, AtFunction func)
  {
    if (getFunction(funcName) != null) {
                throw new IllegalArgumentException("Function '" + funcName + "' cannot be redeclared");
    }
        customFunc.put(funcName.toLowerCase(), func);
  }

  final public SimpleNode Parse(final String formula) throws ParseException {
        java.io.StringReader sr = new java.io.StringReader(formula);
        ReInit(sr);
        return Parse();
  }

  final public SimpleNode Parse() throws ParseException {
 /*@bgen(jjtree) AtDo */
  ASTAtDo jjtn000 = new ASTAtDo(this, JJTATDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(EOS);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_REM:
        jj_consume_token(KW_REM);
        comment();
        break;
      case Date_or_KW:
      case OParen:
      case BoolNot:
      case KW_DEFAULT:
      case KW_ENVIRONMENT:
      case KW_FIELD:
      case KW_SELECT:
      case At_do:
      case At_doWhile:
      case At_for:
      case At_if:
      case At_v2if:
      case At_iferror:
      case At_transform:
      case At_other:
      case OpPlus:
      case OpMinus:
      case NumDoubleUS:
      case NumDoubleDE:
      case NumInteger:
      case String1:
      case String2:
      case Identifier:
        statement();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOS:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        label_3:
        while (true) {
          jj_consume_token(EOS);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOS:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case KW_REM:
          jj_consume_token(KW_REM);
          comment();
          break;
        case Date_or_KW:
        case OParen:
        case BoolNot:
        case KW_DEFAULT:
        case KW_ENVIRONMENT:
        case KW_FIELD:
        case KW_SELECT:
        case At_do:
        case At_doWhile:
        case At_for:
        case At_if:
        case At_v2if:
        case At_iferror:
        case At_transform:
        case At_other:
        case OpPlus:
        case OpMinus:
        case NumDoubleUS:
        case NumDoubleDE:
        case NumInteger:
        case String1:
        case String2:
        case Identifier:
          statement();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final private void comment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case String1:
      jj_consume_token(String1);
      break;
    case String2:
      jj_consume_token(String2);
      break;
    case OParen:
      jj_consume_token(OParen);
      comment();
      jj_consume_token(CParen);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void statement() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_FIELD:
      jj_consume_token(KW_FIELD);
                                  ASTAssignment jjtn001 = new ASTAssignment(this, JJTASSIGNMENT);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
      try {
        t = jj_consume_token(Identifier);
        jj_consume_token(Assign);
                                                                jjtn001.init(t.image, ASTAssignment.FIELD);
        opBool();
      } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
      } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                  }
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      if (jj_2_1(2)) {
                                  ASTAssignment jjtn002 = new ASTAssignment(this, JJTASSIGNMENT);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
        try {
          t = jj_consume_token(Identifier);
          jj_consume_token(Assign);
                                                                jjtn002.init(t.image, ASTAssignment.VAR);
          opBool();
        } catch (Throwable jjte002) {
                                  if (jjtc002) {
                                    jjtree.clearNodeScope(jjtn002);
                                    jjtc002 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte002 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte002;}
                                  }
                                  if (jjte002 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte002;}
                                  }
                                  {if (true) throw (Error)jjte002;}
        } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                  }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case KW_ENVIRONMENT:
          jj_consume_token(KW_ENVIRONMENT);
                                  ASTAssignment jjtn003 = new ASTAssignment(this, JJTASSIGNMENT);
                                  boolean jjtc003 = true;
                                  jjtree.openNodeScope(jjtn003);
          try {
            t = jj_consume_token(Identifier);
            jj_consume_token(Assign);
                                                                jjtn003.init(t.image, ASTAssignment.ENV);
            opBool();
          } catch (Throwable jjte003) {
                                  if (jjtc003) {
                                    jjtree.clearNodeScope(jjtn003);
                                    jjtc003 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte003 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte003;}
                                  }
                                  if (jjte003 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte003;}
                                  }
                                  {if (true) throw (Error)jjte003;}
          } finally {
                                  if (jjtc003) {
                                    jjtree.closeNodeScope(jjtn003, true);
                                  }
          }
          break;
        case KW_DEFAULT:
          jj_consume_token(KW_DEFAULT);
                                  ASTAssignment jjtn004 = new ASTAssignment(this, JJTASSIGNMENT);
                                  boolean jjtc004 = true;
                                  jjtree.openNodeScope(jjtn004);
          try {
            t = jj_consume_token(Identifier);
            jj_consume_token(Assign);
                                                                jjtn004.init(t.image, ASTAssignment.DEFAULT);
            opBool();
          } catch (Throwable jjte004) {
                                  if (jjtc004) {
                                    jjtree.clearNodeScope(jjtn004);
                                    jjtc004 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte004 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte004;}
                                  }
                                  if (jjte004 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte004;}
                                  }
                                  {if (true) throw (Error)jjte004;}
          } finally {
                                  if (jjtc004) {
                                    jjtree.closeNodeScope(jjtn004, true);
                                  }
          }
          break;
        case KW_SELECT:
          jj_consume_token(KW_SELECT);
                        ASTSelect jjtn005 = new ASTSelect(this, JJTSELECT);
                        boolean jjtc005 = true;
                        jjtree.openNodeScope(jjtn005);
          try {
            opBool();
          } catch (Throwable jjte005) {
                        if (jjtc005) {
                          jjtree.clearNodeScope(jjtn005);
                          jjtc005 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte005 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte005;}
                        }
                        if (jjte005 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte005;}
                        }
                        {if (true) throw (Error)jjte005;}
          } finally {
                        if (jjtc005) {
                          jjtree.closeNodeScope(jjtn005, true);
                        }
          }
          break;
        case Date_or_KW:
        case OParen:
        case BoolNot:
        case At_do:
        case At_doWhile:
        case At_for:
        case At_if:
        case At_v2if:
        case At_iferror:
        case At_transform:
        case At_other:
        case OpPlus:
        case OpMinus:
        case NumDoubleUS:
        case NumDoubleDE:
        case NumInteger:
        case String1:
        case String2:
        case Identifier:
          opBool();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final private void opBool() throws ParseException {
    opCmp();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BoolAnd:
      case BoolOr:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      ASTOperator jjtn001 = new ASTOperator(this, JJTOPERATOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BoolAnd:
          jj_consume_token(BoolAnd);
          opCmp();
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtc001 = false;
                                     jjtn001.setFunction("&");
          break;
        case BoolOr:
          jj_consume_token(BoolOr);
          opCmp();
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtc001 = false;
                                     jjtn001.setFunction("|");
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
    }
  }

  final private void opCmp() throws ParseException {
    opAdd();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CmpEqual:
      case CmpEqualP:
      case CmpNE:
      case CmpNEP:
      case CmpLT:
      case CmpLTP:
      case CmpGT:
      case CmpGTP:
      case CmpLTE:
      case CmpLTEP:
      case CmpGTE:
      case CmpGTEP:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      ASTOperator jjtn001 = new ASTOperator(this, JJTOPERATOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CmpEqual:
          jj_consume_token(CmpEqual);
          opAdd();
                                          jjtree.closeNodeScope(jjtn001,  2);
                                          jjtc001 = false;
                                         jjtn001.setFunction("=")               ;
          break;
        case CmpEqualP:
          jj_consume_token(CmpEqualP);
          opAdd();
                                          jjtree.closeNodeScope(jjtn001,  2);
                                          jjtc001 = false;
                                         jjtn001.setFunction("*=")              ;
          break;
        case CmpNE:
          jj_consume_token(CmpNE);
          opAdd();
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                  jjtc001 = false;
                                                 jjtn001.setFunction("<>")              ;
          break;
        case CmpNEP:
          jj_consume_token(CmpNEP);
          opAdd();
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                  jjtc001 = false;
                                                 jjtn001.setFunction("*<>")             ;
          break;
        case CmpLT:
          jj_consume_token(CmpLT);
          opAdd();
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                  jjtc001 = false;
                                                 jjtn001.setFunction("<")               ;
          break;
        case CmpLTP:
          jj_consume_token(CmpLTP);
          opAdd();
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                  jjtc001 = false;
                                                 jjtn001.setFunction("*<")              ;
          break;
        case CmpGT:
          jj_consume_token(CmpGT);
          opAdd();
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                  jjtc001 = false;
                                                 jjtn001.setFunction(">")               ;
          break;
        case CmpGTP:
          jj_consume_token(CmpGTP);
          opAdd();
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                  jjtc001 = false;
                                                 jjtn001.setFunction("*>")              ;
          break;
        case CmpLTE:
          jj_consume_token(CmpLTE);
          opAdd();
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                  jjtc001 = false;
                                                 jjtn001.setFunction("<=")              ;
          break;
        case CmpLTEP:
          jj_consume_token(CmpLTEP);
          opAdd();
                                          jjtree.closeNodeScope(jjtn001,  2);
                                          jjtc001 = false;
                                         jjtn001.setFunction("*<=")             ;
          break;
        case CmpGTE:
          jj_consume_token(CmpGTE);
          opAdd();
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                  jjtc001 = false;
                                                 jjtn001.setFunction(">=")              ;
          break;
        case CmpGTEP:
          jj_consume_token(CmpGTEP);
          opAdd();
                                          jjtree.closeNodeScope(jjtn001,  2);
                                          jjtc001 = false;
                                         jjtn001.setFunction("*>=")             ;
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
    }
  }

  final private void opAdd() throws ParseException {
    opMult();
    label_6:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_6;
      }
                            ASTOperator jjtn001 = new ASTOperator(this, JJTOPERATOR);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OpPlus:
          jj_consume_token(OpPlus);
          opMult();
                                                           jjtree.closeNodeScope(jjtn001,  2);
                                                           jjtc001 = false;
                                                          jjtn001.setFunction("+")      ;
          break;
        case OpPlusP:
          jj_consume_token(OpPlusP);
          opMult();
                                                           jjtree.closeNodeScope(jjtn001,  2);
                                                           jjtc001 = false;
                                                          jjtn001.setFunction("*+")     ;
          break;
        case OpMinus:
          jj_consume_token(OpMinus);
          opMult();
                                                   jjtree.closeNodeScope(jjtn001,  2);
                                                   jjtc001 = false;
                                                  jjtn001.setFunction("-")      ;
          break;
        case OpMinusP:
          jj_consume_token(OpMinusP);
          opMult();
                                                   jjtree.closeNodeScope(jjtn001,  2);
                                                   jjtc001 = false;
                                                  jjtn001.setFunction("*-")     ;
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
      }
    }
  }

  final private void opMult() throws ParseException {
    valueList();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OpMul:
      case OpMulP:
      case OpDiv:
      case OpDivP:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      ASTOperator jjtn001 = new ASTOperator(this, JJTOPERATOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OpMul:
          jj_consume_token(OpMul);
          valueList();
                                               jjtree.closeNodeScope(jjtn001,  2);
                                               jjtc001 = false;
                                              jjtn001.setFunction("*")  ;
          break;
        case OpMulP:
          jj_consume_token(OpMulP);
          valueList();
                                               jjtree.closeNodeScope(jjtn001,  2);
                                               jjtc001 = false;
                                              jjtn001.setFunction("**") ;
          break;
        case OpDiv:
          jj_consume_token(OpDiv);
          valueList();
                                               jjtree.closeNodeScope(jjtn001,  2);
                                               jjtc001 = false;
                                              jjtn001.setFunction("/")  ;
          break;
        case OpDivP:
          jj_consume_token(OpDivP);
          valueList();
                                               jjtree.closeNodeScope(jjtn001,  2);
                                               jjtc001 = false;
                                              jjtn001.setFunction("*/") ;
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
    }
  }

  final private void valueList() throws ParseException {
          ASTValueList jjtn001 = new ASTValueList(this, JJTVALUELIST);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      subscript();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ListConcat:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
        jj_consume_token(ListConcat);
        subscript();
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final private void subscript() throws ParseException {
          ASTSubscript jjtn001 = new ASTSubscript(this, JJTSUBSCRIPT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      unary();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OSubscript:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
        jj_consume_token(OSubscript);
        statement();
        jj_consume_token(CSubscript);
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final private void unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OpPlus:
      jj_consume_token(OpPlus);
      unary();
      break;
    case OpMinus:
      jj_consume_token(OpMinus);
      unary();
                              ASTOperator jjtn001 = new ASTOperator(this, JJTOPERATOR);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
      try {
                              jjtree.closeNodeScope(jjtn001,  1);
                              jjtc001 = false;
                             jjtn001.setFunction(" -")  ;
      } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  1);
                              }
      }
      break;
    case BoolNot:
      jj_consume_token(BoolNot);
      unary();
                              ASTOperator jjtn002 = new ASTOperator(this, JJTOPERATOR);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
      try {
                              jjtree.closeNodeScope(jjtn002,  1);
                              jjtc002 = false;
                             jjtn002.setFunction(" !")          ;
      } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  1);
                              }
      }
      break;
    case At_do:
      jj_consume_token(At_do);
                          ASTAtDo jjtn003 = new ASTAtDo(this, JJTATDO);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(OParen);
        statement();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOS:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_10;
          }
          jj_consume_token(EOS);
          statement();
        }
        jj_consume_token(CParen);
      } catch (Throwable jjte003) {
                          if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte003 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte003;}
                          }
                          if (jjte003 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte003;}
                          }
                          {if (true) throw (Error)jjte003;}
      } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
      }
      break;
    case At_doWhile:
      jj_consume_token(At_doWhile);
                          ASTAtDoWhile jjtn004 = new ASTAtDoWhile(this, JJTATDOWHILE);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(OParen);
        statement();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOS:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_11;
          }
          jj_consume_token(EOS);
          statement();
        }
        jj_consume_token(CParen);
      } catch (Throwable jjte004) {
                          if (jjtc004) {
                            jjtree.clearNodeScope(jjtn004);
                            jjtc004 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte004 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte004;}
                          }
                          if (jjte004 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte004;}
                          }
                          {if (true) throw (Error)jjte004;}
      } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004, true);
                          }
      }
      break;
    case At_for:
      jj_consume_token(At_for);
                          ASTAtFor jjtn005 = new ASTAtFor(this, JJTATFOR);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(OParen);
        statement();
        jj_consume_token(EOS);
        statement();
        jj_consume_token(EOS);
        statement();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOS:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_12;
          }
          jj_consume_token(EOS);
          statement();
        }
        jj_consume_token(CParen);
      } catch (Throwable jjte005) {
                          if (jjtc005) {
                            jjtree.clearNodeScope(jjtn005);
                            jjtc005 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte005 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte005;}
                          }
                          if (jjte005 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte005;}
                          }
                          {if (true) throw (Error)jjte005;}
      } finally {
                          if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005, true);
                          }
      }
      break;
    case At_if:
    case At_v2if:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case At_if:
        jj_consume_token(At_if);
        break;
      case At_v2if:
        jj_consume_token(At_v2if);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                          ASTAtIf jjtn006 = new ASTAtIf(this, JJTATIF);
                                          boolean jjtc006 = true;
                                          jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(OParen);
        statement();
        label_13:
        while (true) {
          jj_consume_token(EOS);
          statement();
          jj_consume_token(EOS);
          statement();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOS:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_13;
          }
        }
        jj_consume_token(CParen);
      } catch (Throwable jjte006) {
                                          if (jjtc006) {
                                            jjtree.clearNodeScope(jjtn006);
                                            jjtc006 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte006 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte006;}
                                          }
                                          if (jjte006 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte006;}
                                          }
                                          {if (true) throw (Error)jjte006;}
      } finally {
                                          if (jjtc006) {
                                            jjtree.closeNodeScope(jjtn006, true);
                                          }
      }
      break;
    case At_iferror:
      jj_consume_token(At_iferror);
                          ASTAtIfError jjtn007 = new ASTAtIfError(this, JJTATIFERROR);
                          boolean jjtc007 = true;
                          jjtree.openNodeScope(jjtn007);
      try {
        jj_consume_token(OParen);
        statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOS:
          jj_consume_token(EOS);
          statement();
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        jj_consume_token(CParen);
      } catch (Throwable jjte007) {
                          if (jjtc007) {
                            jjtree.clearNodeScope(jjtn007);
                            jjtc007 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte007 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte007;}
                          }
                          if (jjte007 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte007;}
                          }
                          {if (true) throw (Error)jjte007;}
      } finally {
                          if (jjtc007) {
                            jjtree.closeNodeScope(jjtn007, true);
                          }
      }
      break;
    case At_transform:
      jj_consume_token(At_transform);
                          ASTAtTranform jjtn008 = new ASTAtTranform(this, JJTATTRANFORM);
                          boolean jjtc008 = true;
                          jjtree.openNodeScope(jjtn008);
      try {
        jj_consume_token(OParen);
        statement();
        jj_consume_token(EOS);
        statement();
        jj_consume_token(EOS);
        statement();
        jj_consume_token(CParen);
      } catch (Throwable jjte008) {
                          if (jjtc008) {
                            jjtree.clearNodeScope(jjtn008);
                            jjtc008 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte008 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte008;}
                          }
                          if (jjte008 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte008;}
                          }
                          {if (true) throw (Error)jjte008;}
      } finally {
                          if (jjtc008) {
                            jjtree.closeNodeScope(jjtn008, true);
                          }
      }
      break;
    case At_other:
      jj_consume_token(At_other);
      formula();
      break;
    case Date_or_KW:
    case OParen:
    case NumDoubleUS:
    case NumDoubleDE:
    case NumInteger:
    case String1:
    case String2:
    case Identifier:
      atom();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void formula() throws ParseException {
 /*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(this, JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
    jjtn000.setFunction(getToken(0).image);
      if (jj_2_3(2)) {
        jj_consume_token(OParen);
        statement();
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOS:
            ;
            break;
          default:
            jj_la1[24] = jj_gen;
            break label_14;
          }
          jj_consume_token(EOS);
          statement();
        }
        jj_consume_token(CParen);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final private void atom() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Date_or_KW:
    case NumDoubleUS:
    case NumDoubleDE:
    case NumInteger:
    case String1:
    case String2:
    case Identifier:
      value();
      break;
    case OParen:
      jj_consume_token(OParen);
      statement();
      jj_consume_token(CParen);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void value() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Date_or_KW:
      t = jj_consume_token(Date_or_KW);
          ASTValueDateOrKW jjtn001 = new ASTValueDateOrKW(this, JJTVALUEDATEORKW);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
          jjtn001.init(t.image);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    case String1:
      t = jj_consume_token(String1);
          ASTValueString jjtn002 = new ASTValueString(this, JJTVALUESTRING);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
          jjtn002.parseString(t.image, '"');
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
      break;
    case String2:
      t = jj_consume_token(String2);
          ASTValueString jjtn003 = new ASTValueString(this, JJTVALUESTRING);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
      try {
          jjtree.closeNodeScope(jjtn003, true);
          jjtc003 = false;
          jjtn003.parseString(t.image, '{' );
      } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
      }
      break;
    case NumDoubleUS:
      t = jj_consume_token(NumDoubleUS);
          ASTValueDouble jjtn004 = new ASTValueDouble(this, JJTVALUEDOUBLE);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
      try {
          jjtree.closeNodeScope(jjtn004, true);
          jjtc004 = false;
          jjtn004.parseDouble(t.image,'.');
      } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
      }
      break;
    case NumDoubleDE:
      t = jj_consume_token(NumDoubleDE);
          ASTValueDouble jjtn005 = new ASTValueDouble(this, JJTVALUEDOUBLE);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
      try {
          jjtree.closeNodeScope(jjtn005, true);
          jjtc005 = false;
          jjtn005.parseDouble(t.image,',');
      } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
      }
      break;
    case NumInteger:
      t = jj_consume_token(NumInteger);
          ASTValueLong jjtn006 = new ASTValueLong(this, JJTVALUELONG);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
      try {
          jjtree.closeNodeScope(jjtn006, true);
          jjtc006 = false;
          jjtn006.parseLong(t.image);
      } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
      }
      break;
    case Identifier:
      t = jj_consume_token(Identifier);
          ASTGetVariable jjtn007 = new ASTGetVariable(this, JJTGETVARIABLE);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
      try {
          jjtree.closeNodeScope(jjtn007, true);
          jjtc007 = false;
          jjtn007.init(t.image);
      } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_31() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(OParen)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(OParen)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(Identifier)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(At_other)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(NumInteger)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(At_transform)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(NumDoubleDE)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(At_iferror)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(NumDoubleUS)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(String2)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(String1)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(Date_or_KW)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(BoolNot)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(At_for)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(KW_SELECT)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(OpMinus)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(KW_DEFAULT)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(OpPlus)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(At_doWhile)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(At_do)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(KW_ENVIRONMENT)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(Identifier)) return true;
    if (jj_scan_token(Assign)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(KW_FIELD)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(OpMinusP)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(OpMinus)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(OpPlusP)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(OpPlus)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public AtFormulaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10,0x283fff22,0x10,0x10,0x283fff22,0x20,0x800,0x283fe722,0x0,0x0,0x80000000,0x80000000,0x78000000,0x7800000,0x7800000,0x400000,0x4,0x10,0x10,0x10,0x60000,0x10,0x10,0x283fc122,0x10,0x22,0x2,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0xee000,0x0,0x0,0xee000,0x60000,0x0,0xee000,0x1800,0x1800,0x7ff,0x7ff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xee000,0x0,0xee000,0xee000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AtFormulaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AtFormulaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AtFormulaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AtFormulaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AtFormulaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AtFormulaParser(AtFormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AtFormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
