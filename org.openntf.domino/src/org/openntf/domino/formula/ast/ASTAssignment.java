/* Generated By:JJTree: Do not edit this line. ASTAssignment.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
/*
 * Â© Copyright FOCONIS AG, 2014
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 
 * implied. See the License for the specific language governing 
 * permissions and limitations under the License.
 */
package org.openntf.domino.formula.ast;

import org.openntf.domino.formula.AtFormulaParser;
import org.openntf.domino.formula.EvaluateException;
import org.openntf.domino.formula.FormulaContext;
import org.openntf.domino.formula.ValueHolder;

public class ASTAssignment extends SimpleNode {
	public static final int FIELD = 1;
	public static final int VAR = 2;
	public static final int ENV = 3;
	public static final int DEFAULT = 4;

	private int type;
	private String varName;

	public ASTAssignment(final int id) {
		super(id);
	}

	public ASTAssignment(final AtFormulaParser p, final int id) {
		super(p, id);
	}

	public void init(final String _varName, final int _type) {
		varName = _varName;
		type = _type;

	}

	/* (non-Javadoc)
	 * @see org.openntf.domino.tests.rpr.formula.SimpleNode#toString(java.lang.String)
	 */
	@Override
	public String toString() {
		switch (type) {
		case FIELD:
			return super.toString() + ": FIELD " + varName;

		case VAR:
			return super.toString() + ": VAR " + varName;

		case ENV:
			return super.toString() + ": ENV " + varName;

		case DEFAULT:
			return super.toString() + ": DEFAULT " + varName;
		}
		return super.toString() + ": ? " + varName;
	}

	@Override
	public ValueHolder evaluate(final FormulaContext ctx) throws EvaluateException {
		ValueHolder value = jjtGetChild(0).evaluate(ctx);
		switch (type) {
		case FIELD:
			ctx.setField(varName, value);
			break;

		case VAR:
			ctx.setVar(varName, value);
			break;

		case ENV:
			break;

		case DEFAULT:
			ctx.setDefault(varName, value);
			break;
		}
		return value;
	}

	@Override
	public void toFormula(final StringBuilder sb) {
		switch (type) {
		case FIELD:
			sb.append("FIELD ");
			break;
		case VAR:
			break;

		case ENV:
			sb.append("ENV ");
			break;

		case DEFAULT:
			sb.append("DEFAULT ");
			break;
		}

		sb.append(varName);
		sb.append(" := ");
		children[0].toFormula(sb);
	}
}
/* JavaCC - OriginalChecksum=5985303b30076529d3e2aa0d267e0702 (do not edit this line) */
