/* Generated By:JJTree&JavaCC: Do not edit this line. AtFormulaParserImplTokenManager.java */
/*
 *  Â© Copyright FOCONIS AG, 2014
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 
 * implied. See the License for the specific language governing 
 * permissions and limitations under the License.
 */
package org.openntf.formula.parse;
import org.openntf.formula.ast.*;
import org.openntf.formula.ast.*;
import org.openntf.formula.*;

/** Token Manager. */
public class AtFormulaParserImplTokenManager implements AtFormulaParserImplConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80000000000000L) != 0L)
            return 10;
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 12;
         if ((active0 & 0x1ffffc000000L) != 0L)
            return 4;
         if ((active0 & 0x8800000000000000L) != 0L)
            return 6;
         if ((active0 & 0x3e00000L) != 0L)
         {
            jjmatchedKind = 77;
            return 33;
         }
         if ((active1 & 0x48L) != 0L)
            return 8;
         if ((active0 & 0x2000000000000L) != 0L)
            return 35;
         return -1;
      case 1:
         if ((active0 & 0x1ffffc000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 1;
            }
            return 5;
         }
         if ((active0 & 0x3e00000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 1;
            }
            return 33;
         }
         return -1;
      case 2:
         if ((active0 & 0x1000000L) != 0L)
            return 33;
         if ((active0 & 0x1ffacc000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 2;
            }
            return 5;
         }
         if ((active0 & 0x530000000L) != 0L)
            return 5;
         if ((active0 & 0x2e00000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 2;
            }
            return 33;
         }
         return -1;
      case 3:
         if ((active0 & 0x2e00000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 3;
            return 33;
         }
         if ((active0 & 0x1ffe6c000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
            return 5;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 5;
         return -1;
      case 4:
         if ((active0 & 0x2600000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 4;
            }
            return 33;
         }
         if ((active0 & 0x800000L) != 0L)
            return 33;
         if ((active0 & 0x1f0c6c000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 4;
            }
            return 5;
         }
         if ((active0 & 0xf200000000L) != 0L)
            return 5;
         return -1;
      case 5:
         if ((active0 & 0x2000000L) != 0L)
            return 33;
         if ((active0 & 0x1f8c2c000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
            return 5;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 5;
         if ((active0 & 0x600000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
            return 33;
         }
         return -1;
      case 6:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 6;
            return 33;
         }
         if ((active0 & 0x200000L) != 0L)
            return 33;
         if ((active0 & 0x28000000000L) != 0L)
            return 5;
         if ((active0 & 0x1d0c2c000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 6;
            return 5;
         }
         return -1;
      case 7:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 7;
            return 33;
         }
         if ((active0 & 0x50424000000L) != 0L)
            return 5;
         if ((active0 & 0x180808000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
            return 5;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 8;
            return 33;
         }
         if ((active0 & 0x8000000L) != 0L)
            return 5;
         if ((active0 & 0x180800000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 8;
            return 5;
         }
         return -1;
      case 9:
         if ((active0 & 0x180000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 9;
            return 5;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 5;
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 9;
            return 33;
         }
         return -1;
      case 10:
         if ((active0 & 0x180000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 10;
            return 5;
         }
         if ((active0 & 0x400000L) != 0L)
            return 33;
         return -1;
      case 11:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 11;
            return 5;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 5;
         return -1;
      case 12:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 12;
            return 5;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 33:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 38:
         return jjStopAtPos(0, 68);
      case 40:
         return jjStopAtPos(0, 18);
      case 41:
         return jjStopAtPos(0, 19);
      case 42:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x5555000000000000L, 0x5L);
      case 43:
         return jjStopAtPos(0, 51);
      case 45:
         return jjStopAtPos(0, 53);
      case 47:
         return jjStartNfaWithStates_0(0, 49, 35);
      case 58:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 17);
      case 60:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 61:
         return jjStartNfaWithStates_0(0, 55, 10);
      case 62:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x1ffffc000000L, 0x0L);
      case 93:
         return jjStopAtPos(0, 16);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 124:
         return jjStopAtPos(0, 69);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 42:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 43:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 45:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 47:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 60:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x1L);
      case 61:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         break;
      case 62:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xc003200000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x10088000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c0504800000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 61:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(2, 64);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(2, 66);
         break;
      case 62:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x22000800000L, active1, 0L);
      case 70:
      case 102:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400200000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 33);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x110a0000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c0000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8c800200000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10004000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x40402000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x240400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 82:
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0xa000000L);
      case 68:
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 33);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 70:
      case 102:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 5);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 76:
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8044000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x100800000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x40400400000L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 5);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 5);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000200000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000000L);
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x60400000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80008000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 78:
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 5);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40400000000L);
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 33);
         break;
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 88:
      case 120:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 5);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 5);
         break;
      case 76:
      case 108:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 40, 5);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x808000000L);
      case 82:
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 5);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      case 78:
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 27, 5);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L);
      case 77:
      case 109:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 5);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(10, 22, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L);
      case 69:
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 43, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 44, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 47)
                     jjAddStates(7, 9);
                  else if (curChar == 36)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(33);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 44)
                     jjCheckNAdd(20);
                  else if (curChar == 46)
                     jjCheckNAdd(15);
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 35:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(48, 49);
                  else if (curChar == 47)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAddStates(13, 15);
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 1:
                  jjAddStates(16, 17);
                  break;
               case 4:
                  if (curChar != 36)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 62 && kind > 57)
                     kind = 57;
                  break;
               case 7:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 61 && kind > 57)
                     kind = 57;
                  break;
               case 9:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 33 && kind > 57)
                     kind = 57;
                  break;
               case 11:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 60 && kind > 57)
                     kind = 57;
                  break;
               case 13:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 44)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAdd(23);
                  break;
               case 24:
               case 26:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 25:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 28:
                  if (curChar == 34 && kind > 75)
                     kind = 75;
                  break;
               case 30:
                  jjAddStates(18, 19);
                  break;
               case 32:
                  if (curChar != 36)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff401000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if (curChar == 47)
                     jjAddStates(7, 9);
                  break;
               case 36:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(13, 15);
                  break;
               case 37:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 38:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 39:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 42)
                     jjCheckNAddStates(20, 22);
                  break;
               case 43:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(44, 42);
                  break;
               case 44:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(44, 42);
                  break;
               case 45:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 46:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 47:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 48:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 42)
                     jjCheckNAddStates(23, 25);
                  break;
               case 50:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(51, 49);
                  break;
               case 51:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(51, 49);
                  break;
               case 52:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddStates(0, 6);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 14);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 19);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddStates(26, 28);
                  break;
               case 57:
                  if ((0x500000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(58);
                  break;
               case 59:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x47fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(33);
                  }
                  else if (curChar == 123)
                     jjCheckNAddTwoStates(30, 31);
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 91)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 93 && kind > 14)
                     kind = 14;
                  break;
               case 3:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
               case 5:
                  if ((0x47fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(5);
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 25:
                  jjAddStates(10, 12);
                  break;
               case 27:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  if (curChar == 123)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 30:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar == 125 && kind > 76)
                     kind = 76;
                  break;
               case 32:
               case 33:
                  if ((0x47fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(33);
                  break;
               case 36:
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(13, 15);
                  break;
               case 41:
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
               case 44:
                  jjCheckNAddTwoStates(44, 42);
                  break;
               case 48:
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
               case 51:
                  jjCheckNAddTwoStates(51, 49);
                  break;
               case 58:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 33:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(33);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(16, 17);
                  break;
               case 4:
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(5);
                  break;
               case 25:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 12);
                  break;
               case 30:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(18, 19);
                  break;
               case 36:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(13, 15);
                  break;
               case 41:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
               case 44:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(44, 42);
                  break;
               case 48:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
               case 51:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(51, 49);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc00L) != 0L)
            return 2;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_2(0xc00L);
      default :
         return jjMoveNfa_2(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(1, 10, 4);
         break;
      case 35:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xfffffff5ffffffffL & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(35, 37);
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if ((0xefffffffffffffffL & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(35, 37);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xefffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(35, 37);
                  break;
               case 1:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if (curChar != 45)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(35, 37);
                  break;
               case 4:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(35, 37);
                  break;
               case 7:
               case 0:
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(35, 37);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(35, 37);
                  break;
               case 7:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(35, 37);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000L) != 0L)
            return 2;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_3(0x2000L);
      default :
         return jjMoveNfa_3(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xfffffff7ffffffffL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
               case 2:
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000000000000L) != 0L)
            return 32;
         if ((active0 & 0x1ffffc000000L) != 0L)
            return 1;
         if ((active0 & 0x8800000000000000L) != 0L)
            return 3;
         if ((active0 & 0x3e00000L) != 0L)
         {
            jjmatchedKind = 77;
            return 30;
         }
         if ((active1 & 0x48L) != 0L)
            return 5;
         if ((active0 & 0x80000000000000L) != 0L)
            return 7;
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0x1ffffc000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 1;
            }
            return 2;
         }
         if ((active0 & 0x3e00000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 1;
            }
            return 30;
         }
         return -1;
      case 2:
         if ((active0 & 0x530000000L) != 0L)
            return 2;
         if ((active0 & 0x2e00000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 2;
            }
            return 30;
         }
         if ((active0 & 0x1000000L) != 0L)
            return 30;
         if ((active0 & 0x1ffacc000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 2;
            }
            return 2;
         }
         return -1;
      case 3:
         if ((active0 & 0x80000000L) != 0L)
            return 2;
         if ((active0 & 0x2e00000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 3;
            return 30;
         }
         if ((active0 & 0x1ffe6c000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
            return 2;
         }
         return -1;
      case 4:
         if ((active0 & 0xf200000000L) != 0L)
            return 2;
         if ((active0 & 0x2600000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 4;
            }
            return 30;
         }
         if ((active0 & 0x800000L) != 0L)
            return 30;
         if ((active0 & 0x1f0c6c000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 4;
            }
            return 2;
         }
         return -1;
      case 5:
         if ((active0 & 0x1f8c2c000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
            return 2;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 2;
         if ((active0 & 0x600000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
            return 30;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 30;
         return -1;
      case 6:
         if ((active0 & 0x28000000000L) != 0L)
            return 2;
         if ((active0 & 0x1d0c2c000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 6;
            return 2;
         }
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 6;
            return 30;
         }
         if ((active0 & 0x200000L) != 0L)
            return 30;
         return -1;
      case 7:
         if ((active0 & 0x50424000000L) != 0L)
            return 2;
         if ((active0 & 0x180808000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
            return 2;
         }
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 7;
            return 30;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 8;
            return 30;
         }
         if ((active0 & 0x8000000L) != 0L)
            return 2;
         if ((active0 & 0x180800000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 8;
            return 2;
         }
         return -1;
      case 9:
         if ((active0 & 0x800000000L) != 0L)
            return 2;
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 9;
            return 30;
         }
         if ((active0 & 0x180000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 9;
            return 2;
         }
         return -1;
      case 10:
         if ((active0 & 0x180000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 10;
            return 2;
         }
         if ((active0 & 0x400000L) != 0L)
            return 30;
         return -1;
      case 11:
         if ((active0 & 0x80000000000L) != 0L)
            return 2;
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 11;
            return 2;
         }
         return -1;
      case 12:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 12;
            return 2;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_1(0x20L, 0x0L);
      case 33:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40L);
      case 38:
         return jjStopAtPos(0, 68);
      case 40:
         return jjStopAtPos(0, 18);
      case 41:
         return jjStopAtPos(0, 19);
      case 42:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_1(0x5555000000000000L, 0x5L);
      case 43:
         return jjStopAtPos(0, 51);
      case 45:
         return jjStopAtPos(0, 53);
      case 47:
         return jjStartNfaWithStates_1(0, 49, 32);
      case 58:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_1(0x100000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 17);
      case 60:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_1(0x8000000000000000L, 0x0L);
      case 61:
         return jjStartNfaWithStates_1(0, 55, 7);
      case 62:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2L);
      case 64:
         return jjMoveStringLiteralDfa1_1(0x1ffffc000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 15);
      case 93:
         return jjStopAtPos(0, 16);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_1(0x200000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_1(0x400000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_1(0x800000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_1(0x1000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_1(0x2000000L, 0x0L);
      case 124:
         return jjStopAtPos(0, 69);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 42:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 43:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 45:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 47:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 60:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000000000L, active1, 0x1L);
      case 61:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         break;
      case 62:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x4L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0x30000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0xc003200000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_1(active0, 0x10088000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x1c0504800000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x2800000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000000L, active1, 0L);
      case 61:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(2, 64);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(2, 66);
         break;
      case 62:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x22000800000L, active1, 0L);
      case 70:
      case 102:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x400200000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(2, 24, 30);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x110a0000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x1c0000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_1(active0, 0xc000400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x8c800200000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x10004000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_1(active0, 0x40402000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x240400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000L);
      case 82:
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(3, 31, 2);
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0xa000000L);
      case 68:
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(4, 23, 30);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000000L);
      case 70:
      case 102:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(4, 33, 2);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_1(active0, 0x20000000L);
      case 76:
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x8044000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x100800000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x40400400000L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 36, 2);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 37, 2);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x20000200000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_1(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x180000000000L);
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(5, 30, 2);
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0x200000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_1(active0, 0x400000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x60400000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_1(active0, 0x800000000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(5, 25, 30);
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_1(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_1(active0, 0x4000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_1(active0, 0x800000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0x80008000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000L);
      case 78:
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 41, 2);
         return jjMoveStringLiteralDfa7_1(active0, 0x400000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x40400000000L);
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(6, 21, 30);
         break;
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_1(active0, 0x100000000000L);
      case 88:
      case 120:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 39, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_1(active0, 0x100000000000L);
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(7, 26, 2);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(7, 29, 2);
         break;
      case 76:
      case 108:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 40, 2);
         return jjMoveStringLiteralDfa8_1(active0, 0x80000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_1(active0, 0x400000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_1(active0, 0x808000000L);
      case 82:
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(7, 34, 2);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 42, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_1(active0, 0x80000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_1(active0, 0x400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x100000000000L);
      case 78:
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(8, 27, 2);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_1(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_1(active0, 0x80000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_1(active0, 0x100000000000L);
      case 77:
      case 109:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(9, 35, 2);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_1(active0, 0x100000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_1(active0, 0x80000000000L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(10, 22, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_1(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_1(active0, 0x100000000000L);
      case 69:
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(11, 43, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_1(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_1(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(13, 44, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_1(12, active0, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 58;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     jjCheckNAddStates(38, 44);
                  }
                  else if (curChar == 47)
                     jjAddStates(45, 47);
                  else if (curChar == 36)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(30);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(48, 50);
                  else if (curChar == 44)
                     jjCheckNAdd(17);
                  else if (curChar == 46)
                     jjCheckNAdd(12);
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 32:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(45, 46);
                  else if (curChar == 47)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAddStates(51, 53);
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 1:
                  if (curChar != 36)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 62 && kind > 57)
                     kind = 57;
                  break;
               case 4:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 61 && kind > 57)
                     kind = 57;
                  break;
               case 6:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 33 && kind > 57)
                     kind = 57;
                  break;
               case 8:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 60 && kind > 57)
                     kind = 57;
                  break;
               case 10:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 46)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 44)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAdd(20);
                  break;
               case 21:
               case 23:
                  if (curChar == 34)
                     jjCheckNAddStates(48, 50);
                  break;
               case 22:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(48, 50);
                  break;
               case 25:
                  if (curChar == 34 && kind > 75)
                     kind = 75;
                  break;
               case 27:
                  jjAddStates(54, 55);
                  break;
               case 29:
                  if (curChar != 36)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff401000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if (curChar == 47)
                     jjAddStates(45, 47);
                  break;
               case 33:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(51, 53);
                  break;
               case 34:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 35:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 36:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 38:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar == 42)
                     jjCheckNAddStates(56, 58);
                  break;
               case 40:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 39);
                  break;
               case 41:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 39);
                  break;
               case 42:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 43:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 44:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 45:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if (curChar == 42)
                     jjCheckNAddStates(59, 61);
                  break;
               case 47:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(48, 46);
                  break;
               case 48:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(48, 46);
                  break;
               case 49:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddStates(38, 44);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 11);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 16);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddStates(62, 64);
                  break;
               case 54:
                  if ((0x500000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(55);
                  break;
               case 56:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x47fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(30);
                  }
                  else if (curChar == 123)
                     jjCheckNAddTwoStates(27, 28);
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
               case 2:
                  if ((0x47fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(2);
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(65, 66);
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(67, 68);
                  break;
               case 22:
                  jjAddStates(48, 50);
                  break;
               case 24:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 123)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 27:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 125 && kind > 76)
                     kind = 76;
                  break;
               case 29:
               case 30:
                  if ((0x47fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(30);
                  break;
               case 33:
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(51, 53);
                  break;
               case 38:
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
               case 41:
                  jjCheckNAddTwoStates(41, 39);
                  break;
               case 45:
                  jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
               case 48:
                  jjCheckNAddTwoStates(48, 46);
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(69, 70);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 30:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(30);
                  break;
               case 1:
               case 2:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(2);
                  break;
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(48, 50);
                  break;
               case 27:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(54, 55);
                  break;
               case 33:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(51, 53);
                  break;
               case 38:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
               case 41:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(41, 39);
                  break;
               case 45:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
               case 48:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(48, 46);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 58 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   54, 14, 55, 19, 56, 57, 58, 35, 46, 47, 25, 27, 28, 36, 37, 39, 
   1, 2, 30, 31, 42, 43, 45, 49, 50, 52, 56, 57, 58, 17, 18, 22, 
   23, 59, 60, 0, 1, 6, 51, 11, 52, 16, 53, 54, 55, 32, 43, 44, 
   22, 24, 25, 33, 34, 36, 27, 28, 39, 40, 42, 46, 47, 49, 53, 54, 
   55, 14, 15, 19, 20, 56, 57, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\74\41", "\74\43", 
null, "\43\76", null, "\133", "\135", "\73", "\50", "\51", "\72\75", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\72", "\52", "\52\52", "\57", 
"\52\57", "\53", "\52\53", "\55", "\52\55", "\75", "\52\75", null, "\52\74\76", "\74", 
"\52\74", "\76", "\52\76", "\74\75", "\52\74\75", "\76\75", "\52\76\75", "\41", "\46", 
"\174", "\41\76", null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "SUBSCRIPT",
   "FOCONIS",
   "FOC_PARAM",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 3, -1, 2, 1, 0, 1, 0, 0, 1, 0, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, -1, 
   1, 1, 1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0x3bffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1c0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[61];
private final int[] jjstateSet = new int[122];
protected char curChar;
/** Constructor. */
public AtFormulaParserImplTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public AtFormulaParserImplTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
